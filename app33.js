// =========== i18n ===========
const I18N = {
  th: {
    tagline: "‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏Ñ‡∏∏‡∏ì‚Ä¶",
    chooseLanguage: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤",
    langNote: "(‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏ö‡∏ô‡∏Ç‡∏ß‡∏≤)",
    menuLead:
      "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏™‡πÇ‡∏ï‡∏£‡∏Å ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤",
    riskForm: "‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
    riskDesc: "‡∏ï‡∏≠‡∏ö 22 ‡∏Ç‡πâ‡∏≠ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ~3 ‡∏ô‡∏≤‡∏ó‡∏µ",
    gameSim: "‡πÄ‡∏Å‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå",
    gameDesc: "‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏π‡πâ‡∏ö‡∏≠‡∏™‡∏™‡πÇ‡∏ï‡∏£‡∏Å",
    videoTitle: "‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡πÇ‡∏ï‡∏£‡∏Å",
    videoNote: "(‡πÉ‡∏™‡πà‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ)",
    back: "‚Üê ‡∏Å‡∏•‡∏±‡∏ö",
    prev: "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö",
    next: "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
    riskResultTitle: "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
    retake: "‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    backToMenu: "‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π",
    disclaimer:
      "* ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô ‡πÇ‡∏ó‡∏£ 1669/112 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
    quitGame: "‚Üê ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°",
    playAgain: "‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    levels: { low: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥", mid: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", high: "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á" },
    game: {
      correct: "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ö‡∏≠‡∏™",
      wrong: "‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î! ‡∏ö‡∏≠‡∏™‡∏Æ‡∏µ‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏Ñ‡∏∏‡∏ì",
      win: "‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏≤‡∏ä‡∏ô‡∏∞‡∏ö‡∏≠‡∏™‡∏™‡πÇ‡∏ï‡∏£‡∏Å‡πÑ‡∏î‡πâ üéâ",
      lose: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ ‡∏ö‡∏≠‡∏™‡∏¢‡∏±‡∏á‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏≠‡∏¢‡∏π‡πà ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞",
      timeup: "‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡∏ö‡∏≠‡∏™‡∏´‡∏ô‡∏µ‡πÑ‡∏õ‡πÑ‡∏î‡πâ"
    }
  },
  en: {
    tagline: "Here for you‚Ä¶",
    chooseLanguage: "Choose language",
    langNote: "(You can switch language later at top-right.)",
    menuLead:
      "Learn now‚Äîdon‚Äôt wait for stroke to happen. Knowledge saves time and lives.",
    riskForm: "Risk Assessment",
    riskDesc: "22 questions ‚Ä¢ ~3 mins",
    gameSim: "Scenario Game",
    gameDesc: "Answer to battle the Stroke Boss",
    videoTitle: "Stroke Education Video",
    videoNote: "(Embed a video here later.)",
    back: "‚Üê Back",
    prev: "Previous",
    next: "Next",
    riskResultTitle: "Your risk summary",
    retake: "Retake",
    backToMenu: "Back to Menu",
    disclaimer:
      "* This is educational and not a diagnosis. If you have emergency symptoms, call local emergency services or go to hospital immediately.",
    quitGame: "‚Üê Quit",
    playAgain: "Play again",
    levels: { low: "Low risk", mid: "Moderate risk", high: "High risk" },
    game: {
      correct: "Correct! You hit the boss",
      wrong: "Wrong! Boss heals and hits you",
      win: "Victory! You defeated the Stroke Boss üéâ",
      lose: "Defeat. The boss still stands‚Äîtry again.",
      timeup: "Time‚Äôs up! The boss escaped."
    }
  }
};

let lang = localStorage.getItem("lang") || "th";
const $ = (s) => document.querySelector(s);
const $$ = (s) => Array.from(document.querySelectorAll(s));

function setLang(l) {
  lang = l;
  localStorage.setItem("lang", l);
  // Text nodes
  $$("[data-i18n]").forEach((el) => {
    const key = el.getAttribute("data-i18n");
    const parts = key.split(".");
    let t = I18N[lang];
    for (const p of parts) t = t?.[p];
    if (typeof t === "string") el.textContent = t;
  });
  // Update selects
  $("#langSelect").value = l;
  $("#langSelectRisk").value = l;
  $("#langSelectGame").value = l;
}
setLang(lang);

// Navigation helpers
function show(id) {
  $$(".screen").forEach((s) => s.classList.remove("active"));
  $(id).classList.add("active");
}
function go(id) {
  window.scrollTo({ top: 0, behavior: "instant" });
  show(id);
}

// Bind language buttons (first screen)
$$("[data-set-lang]").forEach((b) =>
  b.addEventListener("click", (e) => {
    setLang(e.currentTarget.getAttribute("data-set-lang"));
    go("#screen-menu");
  })
);

// Header language selects
$("#langSelect").addEventListener("change", (e) => setLang(e.target.value));
$("#langSelectRisk").addEventListener("change", (e) => setLang(e.target.value));
$("#langSelectGame").addEventListener("change", (e) => setLang(e.target.value));

// Menu buttons
$("#btnStartRisk").addEventListener("click", () => startRisk());
$("#btnStartGame").addEventListener("click", () => startGame());

// Back links
$$("[data-nav='menu']").forEach((b) =>
  b.addEventListener("click", () => go("#screen-menu"))
);
$$("[data-nav='risk']").forEach((b) =>
  b.addEventListener("click", () => startRisk())
);
$$("[data-nav='game']").forEach((b) =>
  b.addEventListener("click", () => startGame())
);

// =========== Risk Assessment ===========
/**
 * 22 ‡∏Ç‡πâ‡∏≠: ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
 * ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: { id, text: {th,en}, choices: [{label:{th,en}, score}] }
 * ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° 0-100 ‡πÇ‡∏î‡∏¢ normalize ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */
const RISK_QUESTIONS = [
  // ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏•‡∏±‡∏Å
  QYN("htn", "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", "Do you have hypertension?", 8),
  QYN("dm", "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", "Do you have diabetes?", 8),
  QYN(
    "chol",
    "‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏•/‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á‡πÑ‡∏´‡∏°?",
    "Do you have high cholesterol?",
    6
  ),
  QYN("smoke", "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", "Do you smoke?", 8),
  QYN(
    "af",
    "‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡∏ú‡∏¥‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞ (AF) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "Diagnosed atrial fibrillation (AF)?",
    8
  ),
  QYN(
    "tia",
    "‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ TIA/mini-stroke ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "History of TIA/mini-stroke?",
    8
  ),
  QYN("ob", "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡∏≠‡πâ‡∏ß‡∏ô (BMI ‚â• 30) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", "Obesity (BMI ‚â• 30)?", 5),
  QYN(
    "inactive",
    "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 150 ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "Less than 150 min exercise/week?",
    5
  ),
  QYN(
    "diet",
    "‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Ñ‡πá‡∏°/‡∏°‡∏±‡∏ô/‡∏´‡∏ß‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "High-salt/fat/sugar diet routinely?",
    4
  ),
  QYN(
    "alcohol",
    "‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏î‡∏∑‡πà‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô/‡∏ß‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "Alcohol >2 standard drinks/day or frequently?",
    4
  ),
  // ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô/‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß/‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°
  QYN("stress", "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", "Chronic stress?", 3),
  QYN("sleep", "‡∏ô‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 6 ‡∏ä‡∏°./‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", "Sleep <6h/night?", 3),
  QYN(
    "family",
    "‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏™‡∏≤‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÇ‡∏ï‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "Family history of stroke?",
    5
  ),
  QYN(
    "age55",
    "‡∏≠‡∏≤‡∏¢‡∏∏ ‚â• 55 ‡∏õ‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "Are you 55 years old or older?",
    5
  ),
  QYN("male", "‡πÄ‡∏û‡∏®‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", "Birth sex male?", 2),
  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ/‡∏Å‡∏≤‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á (‡∏ï‡∏≠‡∏ö '‡πÑ‡∏°‡πà' ‡∏à‡∏∞‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤)
  QYNrev(
    "knowFAST",
    "‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô FAST (‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß-‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏≤‡∏≠‡πà‡∏≠‡∏ô-‡∏û‡∏π‡∏î‡∏•‡∏≥‡∏ö‡∏≤‡∏Å-‡πÄ‡∏ß‡∏•‡∏≤) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "Do you know FAST warning signs?",
    2
  ),
  QYNrev(
    "bpCheck",
    "‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "Do you check blood pressure at least monthly?",
    2
  ),
  QYNrev(
    "sugarCheck",
    "‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏£‡∏ß‡∏à‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "If diabetic, do you monitor sugar as advised?",
    2
  ),
  QYNrev(
    "medAdh",
    "‡∏Ñ‡∏∏‡∏ì‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏¢‡∏≤‡∏ï‡∏≤‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏™‡∏±‡πà‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "Do you take prescribed meds regularly?",
    3
  ),
  QYNrev(
    "salt",
    "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏î‡πÄ‡∏Ñ‡πá‡∏°/‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°‡πÉ‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "Do you limit dietary salt?",
    2
  ),
  QYNrev(
    "quitPlan",
    "‡∏´‡∏≤‡∏Å‡∏™‡∏π‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡πÄ‡∏•‡∏¥‡∏Å/‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    "If you smoke, do you have a quit plan/trying to quit?",
    2
  )
];

// helper to build Yes/No item (Yes=score)
function QYN(id, th, en, score) {
  return {
    id,
    text: { th, en },
    choices: [
      { label: { th: "‡πÉ‡∏ä‡πà", en: "Yes" }, score },
      { label: { th: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà", en: "No" }, score: 0 }
    ]
  };
}
// reverse-scored Yes/No (Yes=0, No=score)
function QYNrev(id, th, en, score) {
  return {
    id,
    text: { th, en },
    choices: [
      { label: { th: "‡πÉ‡∏ä‡πà", en: "Yes" }, score: 0 },
      { label: { th: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà", en: "No" }, score }
    ]
  };
}

let riskIndex = 0;
let riskAnswers = [];

function startRisk() {
  riskIndex = 0;
  riskAnswers = Array(RISK_QUESTIONS.length).fill(null);
  renderRisk();
  go("#screen-risk");
}

function renderRisk() {
  const q = RISK_QUESTIONS[riskIndex];
  $("#riskQuestion").textContent = `(${riskIndex + 1}/${RISK_QUESTIONS.length}) ${
    q.text[lang]
  }`;

  const box = $("#riskChoices");
  box.innerHTML = "";
  q.choices.forEach((c, i) => {
    const btn = document.createElement("button");
    btn.className = "btn";
    btn.textContent = c.label[lang];
    btn.addEventListener("click", () => {
      riskAnswers[riskIndex] = i;
      // auto next after click
      if (riskIndex < RISK_QUESTIONS.length - 1) {
        riskIndex++;
        renderRisk();
      } else {
        showRiskResult();
      }
    });
    box.appendChild(btn);
  });

  $("#riskPrev").disabled = riskIndex === 0;
  $("#riskNext").textContent = I18N[lang].next;

  $("#riskPrev").onclick = () => {
    if (riskIndex > 0) {
      riskIndex--;
      renderRisk();
    }
  };

  $("#riskNext").onclick = () => {
    if (riskIndex < RISK_QUESTIONS.length - 1) {
      riskIndex++;
      renderRisk();
    } else {
      showRiskResult();
    }
  };

  // progress
  const pct = ((riskIndex) / RISK_QUESTIONS.length) * 100;
  $("#riskProgress").style.width = `${pct}%` ;
}

function showRiskResult() {
  // sum scores
  let sum = 0;
  let max = 0;
  RISK_QUESTIONS.forEach((q, idx) => {
    const choiceIndex = riskAnswers[idx] ?? 0;
    sum += q.choices[choiceIndex].score;
    // assume max score per item is the maximum of its choices
    max += Math.max(...q.choices.map((c) => c.score));
  });
  const pct = Math.round((sum / max) * 100);
  $("#riskScorePct").textContent = `${pct}%`;

  // level
  let level = "low",
    badgeClass = "low",
    advice = "";
  if (pct >= 66) {
    level = I18N[lang].levels.high;
    badgeClass = "high";
    advice =
      lang === "th"
        ? "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î (‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô/‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•/‡πÑ‡∏Ç‡∏°‡∏±‡∏ô ‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠)"
        : "High risk. See a doctor for evaluation and aggressive risk control (BP/glucose/lipids, stop smoking, regular exercise).";
  } else if (pct >= 33) {
    level = I18N[lang].levels.mid;
    badgeClass = "mid";
    advice =
      lang === "th"
        ? "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô/‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•/‡πÑ‡∏Ç‡∏°‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì FAST"
        : "Moderate risk. Improve lifestyle and monitor health regularly. Check BP/glucose/lipids and learn FAST signs.";
  } else {
    level = I18N[lang].levels.low;
    badgeClass = "low";
    advice =
      lang === "th"
        ? "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô FAST"
        : "Low risk. Maintain healthy habits and know the FAST warning signs.";
  }

  const badge = $("#riskLevelBadge");
  badge.textContent = level;
  badge.className = `badge ${badgeClass}`;
  $("#riskAdvice").textContent = advice;

  $("#riskProgress").style.width = "100%";
  go("#screen-risk-result");
}

// =========== Game ===========
const GAME_CONFIG = {
  timeSec: 60,
  playerMax: 100,
  bossMax: 150,
  damageCorrect: 20,
  bossHealOnWrong: 10,
  playerDamageOnWrong: 15
};

const GAME_QUESTIONS = [
  MC(
    "FAST ‡∏Ñ‡∏£‡∏ö‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ?",
    "Which set correctly describes FAST?",
    [
      ["‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß ‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á ‡∏û‡∏π‡∏î‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î ‡πÄ‡∏ß‡∏•‡∏≤", "Face droop, Arm weakness, Speech trouble, Time", true],
      ["‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á ‡πÄ‡∏´‡∏á‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å ‡∏´‡∏ô‡∏≤‡∏ß‡∏™‡∏±‡πà‡∏ô ‡∏õ‡∏ß‡∏î‡∏®‡∏µ‡∏£‡∏©‡∏∞", "Fever, Sweats, Chills, Headache", false],
      ["‡πÑ‡∏≠ ‡πÄ‡∏à‡πá‡∏ö‡∏Ñ‡∏≠ ‡∏Ñ‡∏±‡∏î‡∏à‡∏°‡∏π‡∏Å ‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å", "Cough, Sore throat, Congestion, Runny nose", false]
    ]
  ),
  MC(
    "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πÇ‡∏ï‡∏£‡∏Å‡∏Ñ‡∏ß‡∏£‡πÑ‡∏õ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏µ‡πà‡∏ô‡∏≤‡∏ó‡∏µ/‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏£‡∏Å?",
    "Within how soon should stroke symptoms be treated?",
    [
      ["‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3‚Äì4.5 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏£‡∏Å", "Within 3‚Äì4.5 hours", true],
      ["‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", "Within 24 hours", false],
      ["‡∏£‡∏≠‡∏î‡∏π 2‚Äì3 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô", "Wait 2‚Äì3 days", false]
    ]
  ),
  MC(
    "‡∏Ç‡πâ‡∏≠‡πÉ‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏™‡πÇ‡∏ï‡∏£‡∏Å",
    "What should you NOT do when suspecting stroke?",
    [
      ["‡πÉ‡∏´‡πâ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥/‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ", "Give food/drink right away", true],
      ["‡πÇ‡∏ó‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£", "Call emergency and note onset time", false],
      ["‡∏û‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ô‡∏±‡πà‡∏á/‡∏ô‡∏≠‡∏ô‡∏ï‡∏∞‡πÅ‡∏Ñ‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", "Sit/lay patient safely", false]
    ]
  ),
  MC(
    "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡πâ‡∏≠‡πÉ‡∏î",
    "Which is an important risk factor?",
    [
      ["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á", "Hypertension", true],
      ["‡∏ú‡∏¥‡∏ß‡πÅ‡∏´‡πâ‡∏á‡πÅ‡∏ï‡∏Å", "Dry skin", false],
      ["‡∏™‡∏≤‡∏¢‡∏ï‡∏≤‡∏™‡∏±‡πâ‡∏ô", "Myopia", false]
    ]
  ),
  MC(
    "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏™‡πÇ‡∏ï‡∏£‡∏Å‡∏û‡∏π‡∏î‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£",
    "Patient slurred speech‚Äîwhat to do first?",
    [
      ["‡πÇ‡∏ó‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ", "Call emergency now", true],
      ["‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏Ø ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏î‡∏π", "Give acetaminophen and wait", false],
      ["‡πÉ‡∏´‡πâ‡∏î‡∏∑‡πà‡∏°‡∏Å‡∏≤‡πÅ‡∏ü‡πÄ‡∏Ç‡πâ‡∏°", "Give strong coffee", false]
    ]
  ),
  MC(
    "‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏Å‡∏•‡∏∑‡∏≠‡πÇ‡∏ã‡πÄ‡∏î‡∏µ‡∏¢‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£",
    "Why does salt restriction help?",
    [
      ["‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï", "Helps control blood pressure", true],
      ["‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ç‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô", "Makes skin lighter", false],
      ["‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏£‡πá‡∏ß", "Makes hair grow faster", false]
    ]
  )
];

function MC(thQ, enQ, opts /* [ [th,en,correct] ] */) {
  return {
    text: { th: thQ, en: enQ },
    choices: opts.map(([th, en, ok]) => ({
      label: { th, en },
      correct: !!ok
    }))
  };
}

let game;
function startGame() {
  game = {
    t: GAME_CONFIG.timeSec,
    player: GAME_CONFIG.playerMax,
    boss: GAME_CONFIG.bossMax,
    qi: 0,
    order: shuffle([...Array(GAME_QUESTIONS.length).keys()])
  };
  // HUD
  updateHP();
  $("#gameTime").textContent = game.t;
  renderGameQ();
  go("#screen-game");

  // timer
  if (game._timer) clearInterval(game._timer);
  game._timer = setInterval(() => {
    game.t--;
    $("#gameTime").textContent = game.t;
    if (game.t <= 0) return endGame("timeup");
  }, 1000);
}

function renderGameQ() {
  const idx = game.order[game.qi % game.order.length];
  const q = GAME_QUESTIONS[idx];
  $("#gameQuestion").textContent = q.text[lang];
  const box = $("#gameChoices");
  box.innerHTML = "";
  shuffle(q.choices.slice()).forEach((c) => {
    const btn = document.createElement("button");
    btn.className = "btn";
    btn.textContent = c.label[lang];
    btn.addEventListener("click", () => onAnswer(c.correct));
    box.appendChild(btn);
  });
}

function onAnswer(correct) {
  if (correct) {
    game.boss = Math.max(0, game.boss - GAME_CONFIG.damageCorrect);
    toast(I18N[lang].game.correct);
  } else {
    game.boss = Math.min(
      GAME_CONFIG.bossMax,
      game.boss + GAME_CONFIG.bossHealOnWrong
    );
    game.player = Math.max(
      0,
      game.player - GAME_CONFIG.playerDamageOnWrong
    );
    toast(I18N[lang].game.wrong);
  }
  updateHP();

  if (game.boss <= 0) return endGame("win");
  if (game.player <= 0) return endGame("lose");

  game.qi++;
  renderGameQ();
}

function updateHP() {
  $("#hpPlayer").style.width =
    (100 * game.player) / GAME_CONFIG.playerMax + "%";
  $("#hpBoss").style.width = (100 * game.boss) / GAME_CONFIG.bossMax + "%";
  $("#hpPlayerText").textContent = `${game.player}/${GAME_CONFIG.playerMax}`;
  $("#hpBossText").textContent = `${game.boss}/${GAME_CONFIG.bossMax}`;
}

function endGame(type) {
  clearInterval(game._timer);
  let title = "Game Over",
    msg = "";
  if (type === "win") {
    title = "üèÜ";
    msg = I18N[lang].game.win;
  } else if (type === "lose") {
    title = "üí•";
    msg = I18N[lang].game.lose;
  } else if (type === "timeup") {
    title = "‚è±";
    msg = I18N[lang].game.timeup;
  }
  $("#gameOverTitle").textContent = title;
  $("#gameOverMsg").textContent = msg;
  go("#screen-game-over");
}

// small toast line
let toastTimer;
function toast(text) {
  let el = $("#_toast");
  if (!el) {
    el = document.createElement("div");
    el.id = "_toast";
    Object.assign(el.style, {
      position: "fixed",
      left: "50%",
      bottom: "22px",
      transform: "translateX(-50%)",
      background: "#000",
      color: "#fff",
      padding: "8px 12px",
      borderRadius: "999px",
      fontWeight: "700",
      zIndex: 9999,
      opacity: 0,
      transition: ".2s opacity"
    });
    document.body.appendChild(el);
  }
  el.textContent = text;
  el.style.opacity = 0.95;
  clearTimeout(toastTimer);
  toastTimer = setTimeout(() => (el.style.opacity = 0), 1200);
}

// utils
function shuffle(arr) {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
  return arr;
}

// start at menu if language known
if (localStorage.getItem("lang")) {
  go("#screen-menu");
} else {
  go("#screen-lang");
}